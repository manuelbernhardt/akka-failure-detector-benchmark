akka {
  loggers = [akka.event.slf4j.Slf4jLogger]
  loglevel = debug
  log-dead-letters = on
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  logger-startup-timeout = 30s

  actor {
    provider = akka.cluster.ClusterActorRefProvider
  }
  cluster {
    min-nr-of-members = 3
    metrics.enabled = off
    seed-nodes = []

    failure-detector {
      implementation-class = "akka.remote.PhiAccrualFailureDetector"
      implementation-class = ${?FD_IMPLEMENTATION_CLASS}
      threshold = 8
      threshold = ${?THRESHOLD}
      scaling-factor = 1.1
      scaling-factor = ${?SCALING_FACTOR}
    }
  }

  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = "127.0.0.1"
      hostname = ${?HOSTNAME}
      port = 2552
    }
  }
}

benchmark {
  warmup-time = 100s // collect a few heartbeat samples
  expected-members = 3
  expected-members = ${?EXPECT_MEMBERS}
  rounds = 10
  plan = [
    { fd: "akka.remote.PhiAccrualFailureDetector", threshold: 8 }
    { fd: "akka.remote.PhiAccrualFailureDetector", threshold: 10 }
    { fd: "akka.remote.PhiAccrualFailureDetector", threshold: 12 }
    { fd: "akka.remote.NewAdaptiveAccrualFailureDetector", threshold: 0.7 }
    { fd: "akka.remote.NewAdaptiveAccrualFailureDetector", threshold: 0.8 }
    { fd: "akka.remote.NewAdaptiveAccrualFailureDetector", threshold: 0.9 }
  ]
}

akka.extensions = [de.heikoseeberger.constructr.ConstructrExtension]

constructr.consul.agent-name = constructr-consul
constructr.consul.agent-name = ${?HOSTNAME}
constructr.coordination.port = 8500

reporting.email.to = ""
reporting.mailgun.domain = ""
reporting.mailgun.key = ""

include "application-prod.conf"

include "application-dev.conf"